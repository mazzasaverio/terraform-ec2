# =============================================================================
# TERRAFORM EC2 PROJECT - SECURE MAKEFILE
# =============================================================================

# Default environment
ENV ?= dev

# Colors for output
RED := \033[31m
GREEN := \033[32m
YELLOW := \033[33m
BLUE := \033[34m
RESET := \033[0m

# SSH key paths (now in parent directory)
SSH_KEY_DIR := ../.ssh
SSH_KEY_NAME := terraform-ec2-key
SSH_PRIVATE_KEY := $(SSH_KEY_DIR)/$(SSH_KEY_NAME)
SSH_PUBLIC_KEY := $(SSH_PRIVATE_KEY).pub

# Default target
.DEFAULT_GOAL := help

# =============================================================================
# PHONY TARGETS
# =============================================================================
.PHONY: help init plan apply destroy outputs clean tf-status ec2-status ec2-start ec2-stop ec2-connect ssh-keys check-keys security-check

# =============================================================================
# HELP
# =============================================================================

help: ## Show this help message
	@echo "$(BLUE)üîê Secure Terraform EC2 Development Server$(RESET)"
	@echo ""
	@echo "$(RED)üîí SECURITY FEATURES:$(RESET)"
	@echo "  ‚Ä¢ SSH keys are NOT stored in Terraform state"
	@echo "  ‚Ä¢ Private keys remain local and secure"
	@echo "  ‚Ä¢ Keys are auto-generated outside Terraform"
	@echo ""
	@echo "$(YELLOW)SECURE SETUP COMMANDS:$(RESET)"
	@grep -E '^[a-zA-Z_-]+:.*?## üîê.*$$' $(MAKEFILE_LIST) | awk 'BEGIN {FS = ":.*?## "}; {printf "$(GREEN)%-15s$(RESET) %s\n", $$1, $$2}' | sed 's/üîê //'
	@echo ""
	@echo "$(YELLOW)TERRAFORM COMMANDS:$(RESET)"
	@grep -E '^[a-zA-Z_-]+:.*?## üîß.*$$' $(MAKEFILE_LIST) | awk 'BEGIN {FS = ":.*?## "}; {printf "$(GREEN)%-15s$(RESET) %s\n", $$1, $$2}' | sed 's/üîß //'
	@echo ""
	@echo "$(YELLOW)EC2 INSTANCE COMMANDS:$(RESET)"
	@grep -E '^[a-zA-Z_-]+:.*?## üíª.*$$' $(MAKEFILE_LIST) | awk 'BEGIN {FS = ":.*?## "}; {printf "$(GREEN)%-15s$(RESET) %s\n", $$1, $$2}' | sed 's/üíª //'
	@echo ""
	@echo "$(BLUE)üöÄ Quick Start (Secure):$(RESET)"
	@echo "  make ssh-keys        # Generate secure SSH keys"
	@echo "  make apply           # Deploy infrastructure"
	@echo "  make ec2-connect     # Connect to server"
	@echo "  make destroy         # Clean up everything"

# =============================================================================
# SECURE SSH KEY MANAGEMENT
# =============================================================================

ssh-keys: ## üîê Generate secure SSH keys (outside Terraform state)
	@echo "$(BLUE)üîë Generating secure SSH keys...$(RESET)"
	@mkdir -p $(SSH_KEY_DIR)
	@./scripts/generate-ssh-keys.sh
	@echo "$(GREEN)‚úÖ SSH keys generated securely!$(RESET)"

check-keys: ## üîê Check if SSH keys exist and are properly configured
	@echo "$(YELLOW)Checking SSH key configuration...$(RESET)"
	@if [ -f "$(SSH_PRIVATE_KEY)" ] && [ -f "$(SSH_PUBLIC_KEY)" ]; then \
		echo "$(GREEN)‚úÖ SSH private key: $(SSH_PRIVATE_KEY)$(RESET)"; \
		echo "$(GREEN)‚úÖ SSH public key: $(SSH_PUBLIC_KEY)$(RESET)"; \
		if [ -f "ssh_public_key.auto.tfvars" ]; then \
			echo "$(GREEN)‚úÖ Terraform variable file: ssh_public_key.auto.tfvars$(RESET)"; \
		else \
			echo "$(RED)‚ùå Missing Terraform variable file$(RESET)"; \
		fi; \
	else \
		echo "$(RED)‚ùå SSH keys not found. Run 'make ssh-keys' first$(RESET)"; \
	fi

# =============================================================================
# TERRAFORM COMMANDS - SECURE VERSION
# =============================================================================

init: check-keys ## üîß Initialize Terraform (with security check)
	@echo "$(YELLOW)Initializing Terraform...$(RESET)"
	@terraform init

plan: check-keys ## üîß Show Terraform plan (with security check)
	@echo "$(YELLOW)Planning deployment...$(RESET)"
	@if [ -f "environments/$(ENV)/terraform.tfvars" ]; then \
		terraform plan -var-file="environments/$(ENV)/terraform.tfvars"; \
	else \
		terraform plan; \
	fi

apply: check-keys ## üîß Apply Terraform configuration (with security check)
	@echo "$(YELLOW)Applying Terraform configuration...$(RESET)"
	@if [ ! -f "$(SSH_PRIVATE_KEY)" ]; then \
		echo "$(RED)‚ùå SSH keys not found. Generating them now...$(RESET)"; \
		$(MAKE) ssh-keys; \
	fi
	@if [ -f "environments/$(ENV)/terraform.tfvars" ]; then \
		terraform apply -var-file="environments/$(ENV)/terraform.tfvars"; \
	else \
		terraform apply; \
	fi

destroy: ## üîß Destroy all infrastructure
	@echo "$(RED)‚ö†Ô∏è  WARNING: This will destroy all infrastructure!$(RESET)"
	@read -p "Are you sure? Type 'yes' to continue: " confirm && [ "$$confirm" = "yes" ]
	@if [ -f "environments/$(ENV)/terraform.tfvars" ]; then \
		terraform destroy -var-file="environments/$(ENV)/terraform.tfvars"; \
	else \
		terraform destroy; \
	fi

outputs: ## üîß Show Terraform outputs
	@echo "$(YELLOW)Terraform Outputs:$(RESET)"
	@terraform output

tf-status: ## üîß Show Terraform state status (secure)
	@echo "$(YELLOW)Terraform State Status:$(RESET)"
	@if [ -f "terraform.tfstate" ]; then \
		echo "$(GREEN)‚úÖ State file exists$(RESET)"; \
		echo "Resources: $$(terraform state list | wc -l)"; \
		echo "$(BLUE)üîí SSH private keys are NOT in state (secure)$(RESET)"; \
	else \
		echo "$(YELLOW)‚ö†Ô∏è  No state file found$(RESET)"; \
	fi

clean: ## üîß Clean Terraform temporary files (keeps SSH keys safe)
	@echo "$(YELLOW)Cleaning Terraform files...$(RESET)"
	@rm -rf .terraform/
	@rm -f .terraform.lock.hcl
	@rm -f terraform.tfplan
	@rm -f terraform.tfstate.backup
	@echo "$(GREEN)‚úÖ Cleaned temporary files$(RESET)"
	@echo "$(BLUE)üîí SSH keys preserved safely$(RESET)"

# =============================================================================
# EC2 INSTANCE COMMANDS - SECURE VERSION
# =============================================================================

ec2-connect: ## üíª Connect to EC2 instance via SSH (using secure keys)
	@echo "$(YELLOW)Connecting to EC2 instance...$(RESET)"
	@if [ ! -f "$(SSH_PRIVATE_KEY)" ]; then \
		echo "$(RED)‚ùå SSH private key not found at $(SSH_PRIVATE_KEY)$(RESET)"; \
		echo "$(YELLOW)Run 'make ssh-keys' to generate keys$(RESET)"; \
		exit 1; \
	fi
	@if terraform output instance_public_ip > /dev/null 2>&1; then \
		IP=$$(terraform output -raw instance_public_ip); \
		echo "$(GREEN)Connecting to: ubuntu@$$IP$(RESET)"; \
		echo "$(BLUE)Using secure SSH key: $(SSH_PRIVATE_KEY)$(RESET)"; \
		ssh -i $(SSH_PRIVATE_KEY) -o StrictHostKeyChecking=no ubuntu@$$IP; \
	else \
		echo "$(RED)‚ùå No instance found. Deploy infrastructure first.$(RESET)"; \
	fi

ec2-status: ## üíª Check EC2 instance status
	@echo "$(YELLOW)Checking EC2 instance status...$(RESET)"
	@if terraform output instance_id > /dev/null 2>&1; then \
		INSTANCE_ID=$$(terraform output -raw instance_id); \
		STATE=$$(aws ec2 describe-instances --instance-ids $$INSTANCE_ID --query 'Reservations[0].Instances[0].State.Name' --output text 2>/dev/null || echo "unknown"); \
		IP=$$(aws ec2 describe-instances --instance-ids $$INSTANCE_ID --query 'Reservations[0].Instances[0].PublicIpAddress' --output text 2>/dev/null || echo "none"); \
		echo "$(BLUE)Instance ID:$(RESET) $$INSTANCE_ID"; \
		echo "$(BLUE)Status:$(RESET) $$STATE"; \
		echo "$(BLUE)Public IP:$(RESET) $$IP"; \
		echo "$(GREEN)üîí SSH Connection:$(RESET) ssh -i $(SSH_PRIVATE_KEY) ubuntu@$$IP"; \
	else \
		echo "$(RED)‚ùå No instance found. Deploy infrastructure first.$(RESET)"; \
	fi

ec2-stop: ## üíª Stop EC2 instance (saves costs)
	@echo "$(YELLOW)Stopping EC2 instance...$(RESET)"
	@if terraform output instance_id > /dev/null 2>&1; then \
		INSTANCE_ID=$$(terraform output -raw instance_id); \
		aws ec2 stop-instances --instance-ids $$INSTANCE_ID > /dev/null; \
		echo "$(GREEN)‚úÖ Instance $$INSTANCE_ID stopped$(RESET)"; \
		echo "$(BLUE)üí° Instance will save costs while stopped$(RESET)"; \
	else \
		echo "$(RED)‚ùå No instance found. Deploy infrastructure first.$(RESET)"; \
	fi

ec2-start: ## üíª Start EC2 instance
	@echo "$(YELLOW)Starting EC2 instance...$(RESET)"
	@if terraform output instance_id > /dev/null 2>&1; then \
		INSTANCE_ID=$$(terraform output -raw instance_id); \
		aws ec2 start-instances --instance-ids $$INSTANCE_ID > /dev/null; \
		echo "$(BLUE)Waiting for instance to be ready...$(RESET)"; \
		aws ec2 wait instance-running --instance-ids $$INSTANCE_ID; \
		NEW_IP=$$(aws ec2 describe-instances --instance-ids $$INSTANCE_ID --query 'Reservations[0].Instances[0].PublicIpAddress' --output text); \
		echo "$(GREEN)‚úÖ Instance started!$(RESET)"; \
		echo "$(BLUE)New IP:$(RESET) $$NEW_IP"; \
		echo "$(GREEN)üîí SSH Command:$(RESET) ssh -i $(SSH_PRIVATE_KEY) ubuntu@$$NEW_IP"; \
		echo "$(YELLOW)üí° IP address may have changed after restart$(RESET)"; \
	else \
		echo "$(RED)‚ùå No instance found. Deploy infrastructure first.$(RESET)"; \
	fi

# =============================================================================
# SECURITY VALIDATION COMMANDS
# =============================================================================

security-check: ## üîê Run comprehensive security check
	@echo "$(BLUE)üîí Running Security Validation...$(RESET)"
	@echo "$(YELLOW)Checking for secrets in Terraform state...$(RESET)"
	@if [ -f "terraform.tfstate" ]; then \
		if grep -q "private_key_pem\|BEGIN.*PRIVATE.*KEY" terraform.tfstate 2>/dev/null; then \
			echo "$(RED)‚ùå SECURITY RISK: Private keys found in Terraform state!$(RESET)"; \
			exit 1; \
		else \
			echo "$(GREEN)‚úÖ No private keys found in Terraform state$(RESET)"; \
		fi; \
	else \
		echo "$(YELLOW)‚ö†Ô∏è  No state file to check$(RESET)"; \
	fi
	@echo "$(YELLOW)Checking SSH key permissions...$(RESET)"
	@if [ -f "$(SSH_PRIVATE_KEY)" ]; then \
		PERMS=$$(stat -c %a $(SSH_PRIVATE_KEY) 2>/dev/null || stat -f %A $(SSH_PRIVATE_KEY) 2>/dev/null); \
		if [ "$$PERMS" = "600" ]; then \
			echo "$(GREEN)‚úÖ SSH private key has correct permissions (600)$(RESET)"; \
		else \
			echo "$(YELLOW)‚ö†Ô∏è  SSH private key permissions: $$PERMS (should be 600)$(RESET)"; \
		fi; \
	fi
	@echo "$(GREEN)üîí Security check completed!$(RESET)"