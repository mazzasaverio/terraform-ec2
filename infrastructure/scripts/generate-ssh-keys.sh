#!/bin/bash
# =============================================================================
# SECURE SSH KEY GENERATION SCRIPT
# Generates SSH keys outside of Terraform to keep private keys secure
# =============================================================================

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "${SCRIPT_DIR}/.." && pwd)"
KEYS_DIR="${PROJECT_ROOT}/.ssh"
KEY_NAME="terraform-ec2-key"
KEY_PATH="${KEYS_DIR}/${KEY_NAME}"

echo -e "${BLUE}🔐 Secure SSH Key Generation${NC}"
echo "=================================="

# Create .ssh directory if it doesn't exist
if [[ ! -d "${KEYS_DIR}" ]]; then
    echo -e "${YELLOW}📁 Creating .ssh directory...${NC}"
    mkdir -p "${KEYS_DIR}"
    chmod 700 "${KEYS_DIR}"
fi

# Check if keys already exist
if [[ -f "${KEY_PATH}" ]] || [[ -f "${KEY_PATH}.pub" ]]; then
    echo -e "${YELLOW}⚠️  SSH keys already exist:${NC}"
    echo "   Private: ${KEY_PATH}"
    echo "   Public:  ${KEY_PATH}.pub"
    echo
    read -p "Do you want to overwrite them? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        echo -e "${BLUE}ℹ️  Keeping existing keys${NC}"
        exit 0
    fi
    echo -e "${YELLOW}🗑️  Removing existing keys...${NC}"
    rm -f "${KEY_PATH}" "${KEY_PATH}.pub"
fi

# Generate new SSH key pair
echo -e "${BLUE}🔑 Generating new SSH key pair...${NC}"
ssh-keygen -t rsa -b 4096 -C "terraform-ec2-$(date +%Y%m%d)" -f "${KEY_PATH}" -N ""

# Set secure permissions
chmod 600 "${KEY_PATH}"
chmod 644 "${KEY_PATH}.pub"

# Create public key variable file for Terraform
echo -e "${BLUE}📝 Creating Terraform variable file...${NC}"
cat > "${PROJECT_ROOT}/ssh_public_key.auto.tfvars" << EOF
# =============================================================================
# SSH PUBLIC KEY CONFIGURATION
# This file is auto-generated by scripts/generate-ssh-keys.sh
# =============================================================================

ssh_public_key = "$(cat "${KEY_PATH}.pub")"
EOF

echo -e "${GREEN}✅ SSH keys generated successfully!${NC}"
echo
echo "📍 Files created:"
echo "   Private key: ${KEY_PATH}"
echo "   Public key:  ${KEY_PATH}.pub"
echo "   Terraform vars: ${PROJECT_ROOT}/ssh_public_key.auto.tfvars"
echo
echo -e "${YELLOW}🔒 Security Notes:${NC}"
echo "   • Private key is NOT stored in Terraform state"
echo "   • Keys directory (.ssh/) is excluded from git"
echo "   • Use 'ssh -i ${KEY_PATH} user@hostname' to connect"
echo
echo -e "${GREEN}🚀 Ready to deploy with Terraform!${NC}" 